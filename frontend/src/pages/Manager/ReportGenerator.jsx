import jsPDF from "jspdf";
import "jspdf-autotable";
import logo from "../../assets/logo.png"; // Ensure PNG format is used
import React, { useState, useEffect } from 'react';
import { Modal, Box, Typography, Button } from "@mui/material";
import { Document, Page, pdfjs } from 'react-pdf';

// Set workerSrc for React-PDF
pdfjs.GlobalWorkerOptions.workerSrc = `https://unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;

const ReportGenerator = ({ reportTitle, docNo, OriginDate,creators, revNo, revDate, trainerName, trainingTitle, location, sessionDate = '', startTrainingDate, endTrainingDate, tableHeaders, tableData }) => {
  const [pdfDataUrl, setPdfDataUrl] = useState(null); // Store generated PDF data URL
  const [previewOpen, setPreviewOpen] = useState(false); // State to control modal visibility
  const [loading, setLoading] = useState(true); // For loading state

  useEffect(() => {
    // Generate PDF preview on component mount
    console.log("header", tableHeaders);
    generatePDF();
  }, []);

  const generatePDF = () => {
    const doc = new jsPDF({ format: "a4" });
    doc.setProperties({
      title: reportTitle,  // This sets the correct title
      subject: "Training Attendance Report",      //should also be dynamic?
      author: "Aakar Foundry Pvt. Ltd.",
      keywords: "Training, Attendance, Report",   //are these needed? Also should they be dynamic
      creator: "Generated by ReportGenerator",    //do you need login emp name over here?
  });


    let marginX = 10;
    let marginY = 10;
    let contentWidth = 190; // Full width with margins

    // **Draw Outer Page Border**
    doc.rect(marginX, marginY, contentWidth, 277); // A4 page height is 297mm

    // **Section 1: Logo & Company Name (Box Outline for Section & Elements)**
    doc.addImage(logo, "PNG", marginX + 20, marginY + 3, 20, 20);
    doc.line(marginX , marginY + 25 , marginX + 57, marginY + 25); // Company logo Box
    doc.setFontSize(13).setFont("helvetica", "bold");
    doc.text("Aakar Foundry Pvt. Ltd.", marginX + 2, marginY + 30);
    doc.line(marginX , marginY + 33 , marginX + 135 , marginY + 33); // Horizontal line after Company Name
    doc.line(marginX + 57, marginY, marginX + 57, marginY + 33); // Vertical line after logo

    // **Section 2: Report Title (Centered, Box Outline)**
    let titleY = marginY + 3;
    doc.setFontSize(16).setFont("helvetica", "bold");
    doc.text(reportTitle, 105, titleY + 12, { align: "center" });

    // **Section 3: Right-Side Document Info (Box Outline)**
    let rightX = marginX + 138;
    doc.setFontSize(11).setFont("helvetica", "bold");
    doc.text(`Doc. No: ${docNo}`, rightX, marginY + 5);
    doc.line(marginX + 135 , marginY + 8 , contentWidth + 10 , marginY + 8); // Line after Doc No.
    doc.text(`Origin Date: ${OriginDate}`, rightX, marginY + 13);
    doc.line(marginX + 135 , marginY + 16 , contentWidth + 10 , marginY + 16); // Line after Origin Date
    doc.text(`Rev No.: ${revNo}`, rightX, marginY + 21);
    doc.line(marginX + 135 , marginY + 24 , contentWidth + 10 , marginY + 24); // Line after Rev No.
    doc.text(`Rev Date: ${revDate}`, rightX, marginY + 30);
    doc.line(marginX + 135 , marginY + 33 ,contentWidth + 10 , marginY + 33); // Line after Rev Date
    doc.text(location, rightX, marginY + 39);
    doc.line(marginX + 135 , marginY + 43 , contentWidth + 10 , marginY + 43); // Line after Name of Trainer

    // **Vertical Line separating Document Info**
    doc.line(marginX + 135 , marginY, marginX + 135, marginY + 68); // Vertical line separating info

    // **Section 4: Training Details (Box Outline)**
    doc.setFontSize(11).setFont("helvetica", "bold");
    doc.text(trainingTitle, marginX + 2, marginY + 39);
    doc.line(marginX, marginY + 43 , marginX + 135 , marginY + 43); // Line after each entry
    doc.text( trainerName, marginX + 2, marginY + 48);
    doc.line(marginX, marginY + 51 , marginX + 135 , marginY + 51); // Line after each entry
    doc.text(sessionDate, marginX + 2, marginY + 57);
    doc.line(marginX, marginY + 60 , marginX + 135 , marginY + 60); // Line after each entry
    doc.text(`Training From: ${startTrainingDate} To: ${endTrainingDate}`, marginX + 2, marginY + 65);
    doc.line(marginX, marginY + 68 , contentWidth + 10 , marginY + 68); // Line after each entry

    // **Table Data**
    if (tableData && tableData.length > 0) {  
      const tableDataWithSerialNo = tableData.map((item, index) => ({
        ...item,
        srNo: index + 1, // Add serial number starting from 1
      }));

      doc.autoTable({
        startY: 80,
        head: [["Sr No.", ...tableHeaders.map(header => 
          typeof header === "string" ? header : header.label || header.name || JSON.stringify(header)
        )]],  
        body: tableDataWithSerialNo.map(item => [item.srNo, ...Object.values(item)]),
        styles: { 
          lineWidth: 0.1,
          lineColor: [0, 0, 0],
          fontSize: 10,
          textColor: [0, 0, 0],
          fontStyle: "bold",
        },
        headStyles: { 
          fillColor: [255, 255, 255],
          textColor: [0, 0, 0],
          fontStyle: "bold",
        },
        alternateRowStyles: { fillColor: false },
        theme: "grid",
        margin: { top: 20, left: 10, right: 10, bottom: 20 },
        tableLineWidth: 0,
      });      

      // **Signatures**
      let signStartY = doc.autoTable.previous.finalY + 10; // Positioning below the table

      doc.text("Sign of Trainer:                  ", marginX + 2, signStartY);
      //doc.line(marginX + 2, signStartY + 2, marginX + 60, signStartY + 2); // Line after Sign of Trainer
      signStartY += 15; // Increase Y position for next sign
      doc.text("Sign of HR:                       ", marginX + 2, signStartY);
      //doc.line(marginX + 2, signStartY + 2, marginX + 60, signStartY + 2); // Line after Sign of HR
      signStartY += 15; // Increase Y position for next sign
      doc.text("Sign of HOD:                      ", marginX + 2, signStartY);
      //doc.line(marginX + 2, signStartY + 2, marginX + 60, signStartY + 2); // Line after Sign of HOD
    } else {
      doc.text("No records found", 10, 90);
    }

    // Generate the PDF data URL
    const pdfData = doc.output('datauristring');  // Output as a Data URL
    setPdfDataUrl(pdfData);  // Set the generated PDF data URL for preview
    setLoading(false); // Set loading to false once the PDF is ready
    setPreviewOpen(true);  // Open the modal for preview
  };

  // Handle the modal open and close actions
  const handleClosePreview = () => {
    setPreviewOpen(false); // Close the modal
    setPdfDataUrl(null);  // Reset PDF preview data (optional)
  };

  return (
    <div>
      {/* Preview Modal */}
      <Modal
        open={previewOpen}
        onClose={handleClosePreview}
        aria-labelledby="pdf-preview-title"
        aria-describedby="pdf-preview-description"
      >
        <Box sx={{ width: "85%", margin: "auto", mt: 5, backgroundColor: "white", padding: 2 }}>
          <Typography variant="h6" sx={{ mb: 1 }}>
            PDF Preview
          </Typography>

          {pdfDataUrl ? (
            <iframe
              src={pdfDataUrl}
              width="100%"
              height="500px"
              style={{ border: 'none' }}
              title="PDF Preview"
            />
          ) : (
            <Typography variant="body1">Loading PDF preview...</Typography>
          )}

          <div style={{ marginTop: '20px', textAlign: 'right' }}>
            <Button 
              onClick={handleClosePreview} 
              variant="outlined" 
              color="secondary"
            >
              Close Preview
            </Button>
          </div>
        </Box>
      </Modal>
    </div>
  );
};

export default ReportGenerator;
